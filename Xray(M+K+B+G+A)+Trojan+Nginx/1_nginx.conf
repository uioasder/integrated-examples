
#user nobody nogroup; #表示以默认用户（root）运行。若取消注释，注意修改为相应权限的用户与组。
worker_processes auto;

error_log /var/log/nginx/error.log; #错误日志的文件地址

pid /run/nginx.pid;

events {
    worker_connections 1024;
}

stream {
    map $ssl_preread_server_name $backend_name {
        zv.xx.yy  vless; #zv.xx.yy修改为对应VLESS+Vision+REALITY的域名
        zt.xx.yy trojan; #zt.xx.yy修改为对应Trojan-Go或Trojan的域名
        zh.xx.yy  http2; #zh.xx.yy修改为对应HTTP/2 server的域名
    }
    upstream vless {
        server 127.0.0.1:5443; #转给VLESS+Vision+REALITY本地监听端口
    }
    upstream trojan {
        server 127.0.0.1:4443; #转给本地中转监听端口
    }
    upstream http2 {
        server 127.0.0.1:7443; #转给HTTP/2 server本地监听端口
    }
    server {
        listen 443;
        listen [::]:443; #无IPv6，此项可以删除。
        ssl_preread on;
        proxy_pass $backend_name;
        proxy_protocol on; #启用PROXY protocol发送（全局模式）
    }

    server {
        listen 127.0.0.1:4443 proxy_protocol; #本地中转监听端口与开启PROXY protocol接收
        proxy_pass 127.0.0.1:6443; #转给Trojan-Go或Trojan本地监听端口
    } #此配置解决nginx SNI中的PROXY protocol发送是针对分流端口全部开启，而Trojan-Go或Trojan不支持PROXY protocol接收问题。
}

http {
    include mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main; #访问日志的文件地址

    sendfile on;

    keepalive_timeout 65;

    server {
        listen 80;
        listen [::]:80; #无IPv6，此项可以删除。
        return 301 https://$host$request_uri; #HTTP自动跳转HTTPS，让网站看起来更真实。
    }

    server {
        listen 127.0.0.1:81; #HTTP/1.1 server本地监听端口
        listen 127.0.0.1:82 http2; #H2C server本地监听端口

        location / {
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; #启用HSTS
            root /var/www/html; #修改为自己存放的WEB文件路径
            index index.html index.htm;
        }
    }

    server {
        listen 127.0.0.1:7443 ssl http2 proxy_protocol; #HTTP/2 server本地监听端口与开启PROXY protocol接收
        set_real_ip_from 127.0.0.1;
        real_ip_header proxy_protocol;

        ssl_certificate /home/tls/wildcard_.xx.yy/wildcard_.xx.yy.crt; #换成自己的通配符证书或SAN证书，绝对路径。
        ssl_certificate_key /home/tls/wildcard_.xx.yy/wildcard_.xx.yy.key; #换成自己的通配符密钥或SAN密钥，绝对路径。

        ssl_protocols TLSv1.2 TLSv1.3; #TLSv1.3需使用版本不小于1.1.1的OpenSSL库编译才支持
        ssl_prefer_server_ciphers on; #优先使用服务端的密码套件（对如下TLSv1.2协议的密码套件有效）
        ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256; #若证书为RSA证书，所有ECDSA改为RSA。
        ssl_ecdh_curve secp521r1:secp384r1:secp256r1:x25519; #指定的参数需使用版本不小于3.0.0的OpenSSL库编译才支持

        location = /HALdGZ9k { #与VMess+WebSocket应用中path对应
            if ($http_upgrade != "websocket") {
                return 404;
            } #WebSocket协商失败时返回404
            proxy_redirect off;
            proxy_pass http://127.0.0.1:2001; #转发给本机VMess+WebSocket监听端口
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /SALdGZ9k { #与Shadowsocks+gRPC应用中serviceName对应
            if ($request_method != "POST") {
                return 404;
            } #POST协商失败时返回404
            client_body_buffer_size 1m;
            client_body_timeout 1h;
            client_max_body_size 0;
            grpc_pass grpc://127.0.0.1:2011; #转发给本机Shadowsocks+gRPC监听端口
            grpc_read_timeout 1h;
            grpc_send_timeout 1h;
            grpc_set_header X-Real-IP $remote_addr;
        }

        location / {
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; #启用HSTS
            root /var/www/html; #修改为自己存放的WEB文件路径
            index index.html index.htm;
        }
    }
}
